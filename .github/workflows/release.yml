name: Deployment
on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      network_name:
        description: 'Choose applicable network'
        required: true
        default: 'dev'
        type: choice
        options: 
          - dev
          - stage
          - ic
      force_deploy:
        description: 'Force deploy'
        default: 'false'
        type: choice
        options: 
          - false
          - true
      confirmation:
        description: 'For the ic or force deployment - confirm your choice by typing "Yes"'
        type: string

env:
  NETWORK_NAME: ${{ github.event.inputs.network_name || 'dev' }}
  FORCE_DEPLOY: ${{ github.event.inputs.force_deploy }}
  CI_DEBUG: true

jobs:
  check-secrets:
    name: Check Secrets
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-latest

    steps:
      - name: Checkout CI repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          repository: internet-identity-labs/ci_libs
          ref: main
          path: ci_libs

      - name: Check secrets
        run: |
          source "${{ github.workspace }}/ci_libs/CI_LIBS.sh"
          JSON='${{ toJSON(env) }}'
          ci_check_secrets "${JSON}"
        env:
          USERGEEK_API_KEY: ${{secrets.PROD_USERGEEK_API_KEY}}
          GH_NPM_REGISTRY: ${{secrets.PSYCHEDELIC_GH_NPM_REGISTRY}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

  build-demo:
    name: Build NFID-Demo
    needs: check-secrets
    environment: ${{ github.event.inputs.network_name || 'dev' }}
    runs-on: ubuntu-latest
    env:
      CANISTER_NAME: nfid-demo

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Checkout CI repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          repository: internet-identity-labs/ci_libs
          ref: main
          path: ci_libs

      - name: Setup DFX 17
        uses: dfinity/setup-dfx@main
        with:
          dfx-version: 0.17.0

      - name: Setup Node 18
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "yarn"

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - name: Cache Node Modules
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
            **/.eslintcache
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: nfid-fe-yarn

      - name: Versions
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh

          ci_versions

      - name: Populate env vars
        env:
          OPTIONS: "${{ vars.OPTIONS }}"
        run: |
          source "${{ github.workspace }}/ci_libs/CI_LIBS.sh"

          ci_echo_debug "Getting values from dfx.json" >&2
          if ! canister_data=$(cat dfx.json | jq -er ".canisters.\"${CANISTER_NAME}\""); then
            ci_echo_error "Can't found canister '${CANISTER_NAME}' data from dfx.json" >&2
            exit 1
          fi

          CANISTER_BRANCH="${GITHUB_REF_NAME////-}"
          ENV_FILE=".env.${NETWORK_NAME}"

          ci_echo_debug "Populating env variables" >&2
          echo "CANISTER_BRANCH=${CANISTER_BRANCH}" >> $GITHUB_ENV
          echo "ENV_FILE=${ENV_FILE}" >> $GITHUB_ENV
          echo "OPTIONS=${OPTIONS}" >> $GITHUB_ENV

      - name: Print Vars
        run: |
          source "${{ github.workspace }}/ci_libs/CI_LIBS.sh"

          ci_echo_info "CANISTER_NAME=${CANISTER_NAME}" >&2
          ci_echo_info "CANISTER_BRANCH=${CANISTER_BRANCH}" >&2
          ci_echo_info "NETWORK_NAME=${NETWORK_NAME}" >&2
          ci_echo_info "ENV_FILE=${ENV_FILE}" >&2
          ci_echo_info "OPTIONS=${OPTIONS}" >&2

      - name: Install
        run: |
          source "${{ github.workspace }}/ci_libs/CI_LIBS.sh"

          ci_echo_debug "yarn --prefer-offline" >&2
          yarn --prefer-offline --frozen-lockfile

      - name: Build
        run: |
          source "${{ github.workspace }}/ci_libs/CI_LIBS.sh"

          ci_echo_info "NPX" >&2
          ci_echo_debug "npx env-cmd -f '${ENV_FILE}' nx build '${CANISTER_NAME}' ${OPTIONS}" >&2
          npx env-cmd -f "${ENV_FILE}" nx build "${CANISTER_NAME}" ${OPTIONS}

          ci_echo_debug "dfx build --network '${NETWORK_NAME}' ${CANISTER_NAME}" >&2
          dfx build --network "${NETWORK_NAME}" "${CANISTER_NAME}"

      - name: Save artifact
        uses: actions/upload-artifact@v4
        with:
          name: nfid-demo
          path: |
            build/
            dist/
            .dfx/

  deploy-demo:
    name: Deploy NFID-Demo
    needs: build-demo
    environment: ${{ github.event.inputs.network_name || 'dev' }}
    env:
      CANISTER_NAME: nfid-demo
    runs-on:
      group: dfx-runner
    defaults:
      run:
        shell: bash

    steps:
    - name: INPUT => Checks network_name
      if: (github.event.inputs.network_name == 'ic') && (github.event.inputs.confirmation != 'Yes')
      run: |
        echo "[ERROR] You have try release to network 'ic' without or with wrong confirmation phrase" >&2
        exit 1

    - name: INPUT => Checks force_deploy
      if: (github.event.inputs.force_deploy == 'true') && (github.event.inputs.confirmation != 'Yes')
      run: |
        echo "[ERROR] You have try to force release without or with wrong confirmation phrase" >&2
        exit 1

    - name: INPUT => Checks branch and network_name
      if: (github.event.inputs.network_name == 'ic') && ! contains( github.ref, 'ic')
      run: |
        echo "[ERROR] For such network you need choose only release branches" >&2
        exit 1

    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Checkout CI repo
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.PAT }}
        repository: internet-identity-labs/ci_libs
        ref: main
        path: ci_libs

    - name: Versions
      run: |
        source ${{ github.workspace }}/ci_libs/CI_LIBS.sh

        ci_versions

    - name: PRE-DEPLOY => Populate env vars
      env:
          DFX_ID_NAME: ${{ vars.DFX_ID_NAME }}
      run: |
        source "${{ github.workspace }}/ci_libs/CI_LIBS.sh"

        ci_echo_debug "Getting values from dfx.json" >&2
        if ! canister_data=$(cat dfx.json | jq -er ".canisters.\"${CANISTER_NAME}\""); then
          ci_echo_error "Can't found canister '${CANISTER_NAME}' data from dfx.json" >&2
          exit 1
        fi

        CANISTER_BRANCH="${GITHUB_REF_NAME////-}"

        ci_echo_debug "Populating env variables" >&2
        echo "CANISTER_BRANCH=${CANISTER_BRANCH}" >> $GITHUB_ENV

        ci_echo_debug "Getting dfx identity for network '${NETWORK_NAME}'" >&2
        DFX_ID_PATH="${HOME}/.config/dfx/identity/${DFX_ID_NAME}"

        echo "DFX_ID_NAME=${DFX_ID_NAME}" >> $GITHUB_ENV
        echo "DFX_ID_PATH=${DFX_ID_PATH}" >> $GITHUB_ENV

    - name: PRE-DEPLOY => Print Vars
      run: |
        source "${{ github.workspace }}/ci_libs/CI_LIBS.sh"
        ci_echo_info "NETWORK_NAME=${NETWORK_NAME}" >&2
        ci_echo_info "CANISTER_NAME=${CANISTER_NAME}" >&2
        ci_echo_info "CANISTER_BRANCH=${CANISTER_BRANCH}" >&2
        ci_echo_info "DFX_ID_NAME=${DFX_ID_NAME}" >&2
        ci_echo_info "DFX_ID_PATH=${DFX_ID_PATH}" >&2

    - name: PRE-DEPLOY => Write identity
      env:
        DFX_ID_KEY: ${{ secrets.DFX_ID_KEY }}
      run: |
        source ${{ github.workspace }}/ci_libs/CI_LIBS.sh

        mkdir -p "${DFX_ID_PATH}"

        ci_echo_warn "Preparing encoded key..." >&2
        echo "${DFX_ID_KEY}" | base64 -d > "${DFX_ID_PATH}/identity.pem"

    - name: PRE-DEPLOY => DFX status.
      run: |
        dfx --version

    - name: DEPLOY => Load artifact
      uses: actions/download-artifact@v4
      with:
        name: nfid-demo

    - name: DEPLOY => Deploy to the canister.
      run: |
        source "${{ github.workspace }}/ci_libs/CI_LIBS.sh"

        if [ "${NETWORK_NAME}" == 'ic' ]; then
          CI_DEBUG="true"
        fi

        if [ "${FORCE_DEPLOY}" == 'true' ]; then
          FORCE="--yes"
        fi

        dfx identity use "${DFX_ID_NAME}"

        ci_echo_debug "dfx canister install ${FORCE} --mode auto --network ${NETWORK_NAME} ${CANISTER_NAME}" >&2
        if ! result=$(dfx canister install ${FORCE} --mode auto --network "${NETWORK_NAME}" "${CANISTER_NAME}"); then
          ci_echo_error "Install failed ${result}" >&2
          exit 1
        fi

        ci_echo_debug "Command output was '${result}'" >&2

        ci_echo_success "Canister '${CANISTER_NAME}' was installed to the network '${NETWORK_NAME}'" >&2

  build-frontend:
    name: Build Frontend
    needs: check-secrets
    environment: ${{ github.event.inputs.network_name || 'dev' }}
    runs-on: ubuntu-latest
    env:
      CANISTER_NAME: nfid-frontend

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Checkout CI repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          repository: internet-identity-labs/ci_libs
          ref: main
          path: ci_libs

      - name: Setup DFX 17
        uses: dfinity/setup-dfx@main
        with:
          dfx-version: 0.17.0

      - name: Setup Node 18
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "yarn"

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - name: Cache Node Modules
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
            **/.eslintcache
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: nfid-fe-yarn

      - name: Versions
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh

          ci_versions

      - name: Populate env vars
        env:
          OPTIONS: "${{ vars.OPTIONS }}"
        run: |
          source "${{ github.workspace }}/ci_libs/CI_LIBS.sh"

          ci_echo_debug "Getting values from dfx.json" >&2
          if ! canister_data=$(cat dfx.json | jq -er ".canisters.\"${CANISTER_NAME}\""); then
            ci_echo_error "Can't found canister '${CANISTER_NAME}' data from dfx.json" >&2
            exit 1
          fi

          CANISTER_BRANCH="${GITHUB_REF_NAME////-}"
          ENV_FILE=".env.${NETWORK_NAME}"

          ci_echo_debug "Populating env variables" >&2
          echo "CANISTER_BRANCH=${CANISTER_BRANCH}" >> $GITHUB_ENV
          echo "ENV_FILE=${ENV_FILE}" >> $GITHUB_ENV
          echo "OPTIONS=${OPTIONS}" >> $GITHUB_ENV

      - name: Print Vars
        run: |
          source "${{ github.workspace }}/ci_libs/CI_LIBS.sh"

          ci_echo_info "CANISTER_NAME=${CANISTER_NAME}" >&2
          ci_echo_info "CANISTER_BRANCH=${CANISTER_BRANCH}" >&2
          ci_echo_info "NETWORK_NAME=${NETWORK_NAME}" >&2
          ci_echo_info "ENV_FILE=${ENV_FILE}" >&2
          ci_echo_info "OPTIONS=${OPTIONS}" >&2

      - name: Install
        env:
          GH_NPM_REGISTRY: ${{ secrets.PSYCHEDELIC_GH_NPM_REGISTRY }}
        run: |
          source "${{ github.workspace }}/ci_libs/CI_LIBS.sh"

          ci_echo_debug "Preparing npmrc" >&2
          cat > ~/.npmrc << EOF
          @psychedelic:registry=https://npm.pkg.github.com
          @internet-identity-labs:registry=https://npm.pkg.github.com
          //npm.pkg.github.com/:_authToken=${GH_NPM_REGISTRY}
          EOF

          ci_echo_debug "yarn --prefer-offline" >&2
          yarn --prefer-offline --frozen-lockfile

      - name: Build
        env:
          IS_DEV: ${{ vars.IS_DEV }}
          IC_HOST: https://ic0.app
          USERGEEK_API_KEY: ${{ secrets.PROD_USERGEEK_API_KEY }}
          GH_NPM_REGISTRY: ${{ secrets.PSYCHEDELIC_GH_NPM_REGISTRY }}
        run: |
          source "${{ github.workspace }}/ci_libs/CI_LIBS.sh"

          ci_echo_debug "npx env-cmd -f '${ENV_FILE}' nx build '${CANISTER_NAME}' ${OPTIONS}" >&2
          npx env-cmd -f "${ENV_FILE}" nx build "${CANISTER_NAME}" ${OPTIONS}

          ci_echo_debug "dfx build --network '${NETWORK_NAME}' ${CANISTER_NAME}" >&2
          dfx build --network "${NETWORK_NAME}" "${CANISTER_NAME}"

      - name: Save artifact
        uses: actions/upload-artifact@v4
        with:
          name: nfid-frontend
          path: |
            build/
            dist/
            .dfx/

  deploy-frotnend:
    name: Deploy Frontend
    needs: build-frontend
    environment: ${{ github.event.inputs.network_name || 'dev' }}
    env:
      CANISTER_NAME: nfid-frontend
    runs-on:
      group: dfx-runner
    defaults:
      run:
        shell: bash

    steps:
      - name: INPUT => Checks network_name
        if: (github.event.inputs.network_name == 'ic') && (github.event.inputs.confirmation != 'Yes')
        run: |
          echo "[ERROR] You have try release to network 'ic' without or with wrong confirmation phrase" >&2
          exit 1

      - name: INPUT => Checks force_deploy
        if: (github.event.inputs.force_deploy == 'true') && (github.event.inputs.confirmation != 'Yes')
        run: |
          echo "[ERROR] You have try to force release without or with wrong confirmation phrase" >&2
          exit 1

      - name: INPUT => Checks branch and network_name
        if: (github.event.inputs.network_name == 'ic') && ! contains( github.ref, 'ic')
        run: |
          echo "[ERROR] For such network you need choose only release branches" >&2
          exit 1
          
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Checkout CI repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          repository: internet-identity-labs/ci_libs
          ref: main
          path: ci_libs

      - name: Versions
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh

          ci_versions

      - name: PRE-DEPLOY => Populate env vars
        env:
            DFX_ID_NAME: ${{ vars.DFX_ID_NAME }}
        run: |
          source "${{ github.workspace }}/ci_libs/CI_LIBS.sh"

          ci_echo_debug "Getting values from dfx.json" >&2
          if ! canister_data=$(cat dfx.json | jq -er ".canisters.\"${CANISTER_NAME}\""); then
            ci_echo_error "Can't found canister '${CANISTER_NAME}' data from dfx.json" >&2
            exit 1
          fi

          CANISTER_BRANCH="${GITHUB_REF_NAME////-}"

          ci_echo_debug "Populating env variables" >&2
          echo "CANISTER_BRANCH=${CANISTER_BRANCH}" >> $GITHUB_ENV

          ci_echo_debug "Getting dfx identity for network '${NETWORK_NAME}'" >&2
          DFX_ID_PATH="${HOME}/.config/dfx/identity/${DFX_ID_NAME}"

          echo "DFX_ID_NAME=${DFX_ID_NAME}" >> $GITHUB_ENV
          echo "DFX_ID_PATH=${DFX_ID_PATH}" >> $GITHUB_ENV

      - name: PRE-DEPLOY => Print Vars
        run: |
          source "${{ github.workspace }}/ci_libs/CI_LIBS.sh"
          ci_echo_info "NETWORK_NAME=${NETWORK_NAME}" >&2
          ci_echo_info "CANISTER_NAME=${CANISTER_NAME}" >&2
          ci_echo_info "CANISTER_BRANCH=${CANISTER_BRANCH}" >&2
          ci_echo_info "DFX_ID_NAME=${DFX_ID_NAME}" >&2
          ci_echo_info "DFX_ID_PATH=${DFX_ID_PATH}" >&2

      - name: PRE-DEPLOY => Write identity
        env:
          DFX_ID_KEY: ${{ secrets.DFX_ID_KEY }}
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh

          mkdir -p "${DFX_ID_PATH}"

          ci_echo_warn "Preparing encoded key..." >&2
          echo "${DFX_ID_KEY}" | base64 -d > "${DFX_ID_PATH}/identity.pem"

      - name: PRE-DEPLOY => DFX status.
        run: |
          dfx --version

      - name: DEPLOY => Load artifact
        uses: actions/download-artifact@v4
        with:
          name: nfid-frontend

      - name: DEPLOY => Deploy to the canister.
        run: |
          source "${{ github.workspace }}/ci_libs/CI_LIBS.sh"

          if [ "${NETWORK_NAME}" == 'ic' ]; then
            CI_DEBUG="true"
          fi

          if [ "${FORCE_DEPLOY}" == 'true' ]; then
            FORCE="--yes"
          fi

          dfx identity use "${DFX_ID_NAME}"

          ci_echo_debug "dfx canister install ${FORCE} --mode auto --network ${NETWORK_NAME} ${CANISTER_NAME}" >&2
          if ! result=$(dfx canister install ${FORCE} --mode auto --network "${NETWORK_NAME}" "${CANISTER_NAME}"); then
            ci_echo_error "Install failed ${result}" >&2
            exit 1
          fi

          ci_echo_debug "Command output was '${result}'" >&2

          ci_echo_success "Canister '${CANISTER_NAME}' was installed to the network '${NETWORK_NAME}'" >&2
        