name: Deployment
on:
  workflow_dispatch:

env:
  CI_DEBUG: "true"

jobs:
  check-secrets:
    defaults:
      run:
        shell: bash

    runs-on: ubuntu-latest

    steps:
      - name: Checkout CI repo.
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          repository: internet-identity-labs/ci_libs
          ref: main
          path: ci_libs

      - name: Check secrets
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh
          JSON='${{ toJSON(env) }}'
          ci_check_secrets "${JSON}"
        env:
          USERGEEK_API_KEY: ${{secrets.PROD_USERGEEK_API_KEY}}
          ETHERSCAN_API_KEY: ${{secrets.ETHERSCAN_API_KEY}}
          RARIBLE_X_API_KEY: ${{secrets.RARIBLE_X_API_KEY}}
          PROD_RARIBLE_X_API_KEY: ${{secrets.PROD_RARIBLE_X_API_KEY}}
          ETH_ALCHEMY_API_KEY: ${{secrets.ETH_ALCHEMY_API_KEY}}
          MATIC_ALCHEMY_API_KEY: ${{secrets.MATIC_ALCHEMY_API_KEY}}
          MUMBAI_ALCHEMY_API_KEY: ${{secrets.MUMBAI_ALCHEMY_API_KEY}}
          RAMP_WALLET_API_KEY: ${{secrets.RAMP_WALLET_API_KEY}}
          PSYCHEDELIC_GH_NPM_REGISTRY: ${{secrets.PSYCHEDELIC_GH_NPM_REGISTRY}}
          BLOCK_CYPHER_TOKEN: ${{secrets.BLOCK_CYPHER_TOKEN}}
          SENTRY_AUTH_TOKEN: ${{secrets.SENTRY_AUTH_TOKEN}}
          SENTRY_ORG: ${{secrets.SENTRY_ORG}}
          SENTRY_PROJECT: ${{secrets.SENTRY_PROJECT_NFID}}
          SENTRY_LOG_LEVEL: ${{secrets.SENTRY_LOG_LEVEL}}
          CLOUDFLARE_API_TOKEN: ${{secrets.CLOUDFLARE_API_TOKEN}}
          CLOUDFLARE_ACCOUNT_ID: ${{secrets.CLOUDFLARE_ACCOUNT_ID}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

  deploy:
    name: Deploy Playground NFID (playground.nfid.one) to IC Canister
    needs: check-secrets
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo.
        uses: actions/checkout@v4

      - name: Checkout CI repo.
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          repository: internet-identity-labs/ci_libs
          ref: main
          path: ci_libs

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "yarn"

      - uses: aviate-labs/setup-dfx@v0.2.6
        with:
          dfx-version: 0.13.1
          dfx-disable-encryption: true
        env:
          DFX_IDENTITY_PEM: ${{ secrets.GH_MP_ADMIN_PEM }}

      - name: Versions
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh
          
          ci_versions

      - name: NFID FRONTEND | install & format check
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh

          cat > ~/.npmrc << EOF
          @psychedelic:registry=https://npm.pkg.github.com
          //npm.pkg.github.com/:_authToken=${PSYCHEDELIC_GH_NPM_REGISTRY}
          EOF

          ci_echo_debug "yarn" >&2
          yarn
        env:
          PSYCHEDELIC_GH_NPM_REGISTRY: ${{secrets.PSYCHEDELIC_GH_NPM_REGISTRY}}

      - name: NFID FRONTEND | deploy
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh

          # install local to generate the types
          ci_echo_debug "npx env-cmd -f .env.production nx build nfid-demo --skip-nx-cache" >&2
          npx env-cmd -f .env.production nx build nfid-demo --skip-nx-cache

          ci_echo_debug "dfx identity use action" >&2
          dfx identity use action

          ci_echo_debug "dfx deploy --network ic nfid-demo --no-wallet" >&2
          dfx deploy --network ic nfid-demo --no-wallet

  deploy-cloudflare:
    name: Deploy NFID-Frontend to Cloudflare Pages
    needs: check-secrets
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch

      - name: Checkout repo.
        uses: actions/checkout@v4

      - name: Checkout CI repo.
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          repository: internet-identity-labs/ci_libs
          ref: main
          path: ci_libs

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "yarn"

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - name: Cache Node Modules.
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
            **/.eslintcache
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-cloudflare-${{ hashFiles('**/yarn.lock') }}

      - name: Versions
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh
          
          ci_versions
  
      - name: Install
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh

          ci_echo_debug "yarn --prefer-offline" >&2
          yarn --prefer-offline

      - name: Build
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh

          ci_echo_debug "yarn build:cloudflare" >&2
          yarn build:cloudflare
        env:
          IS_DEV: false
          IC_HOST: https://ic0.app
          ETHERSCAN_API_KEY: ${{secrets.ETHERSCAN_API_KEY}}
          RARIBLE_X_API_KEY: ${{secrets.RARIBLE_X_API_KEY}}
          MAINNET_RARIBLE_X_API_KEY: ${{secrets.MAINNET_RARIBLE_X_API_KEY}}
          PROD_RARIBLE_X_API_KEY: ${{secrets.PROD_RARIBLE_X_API_KEY}}
          ETH_ALCHEMY_API_KEY: ${{secrets.ETH_ALCHEMY_API_KEY}}
          MATIC_ALCHEMY_API_KEY: ${{secrets.MATIC_ALCHEMY_API_KEY}}
          MUMBAI_ALCHEMY_API_KEY: ${{secrets.MUMBAI_ALCHEMY_API_KEY}}
          RAMP_WALLET_API_KEY: ${{secrets.RAMP_WALLET_API_KEY}}
          REACT_APP_SENTRY_CONNECTION: ${{secrets.PROD_SENTRY_CONNECTION}}
          USERGEEK_API_KEY: ${{secrets.PROD_USERGEEK_API_KEY}}
          PSYCHEDELIC_GH_NPM_REGISTRY: ${{secrets.PSYCHEDELIC_GH_NPM_REGISTRY}}
          BLOCK_CYPHER_TOKEN: ${{secrets.BLOCK_CYPHER_TOKEN}}
          CF_PAGES_BRANCH: ${{steps.extract_branch.outputs.branch}}

      - name: Publish
        uses: cloudflare/pages-action@1
        with:
          apiToken: ${{secrets.CLOUDFLARE_API_TOKEN}}
          accountId: ${{secrets.CLOUDFLARE_ACCOUNT_ID}}
          gitHubToken: ${{secrets.GITHUB_TOKEN}}
          projectName: nfid-frontend
          directory: dist/apps/nfid-frontend

      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT_NFID }}
          SENTRY_LOG_LEVEL: ${{ secrets.SENTRY_LOG_LEVEL }}
        with:
          environment: production
          sourcemaps: dist/apps/nfid-frontend/static/js
