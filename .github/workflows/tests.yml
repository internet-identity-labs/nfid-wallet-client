# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Tests CI

on:
  push:
    branches: [main, current-release, release/*]
  pull_request:
    branches: [main, current-release, release/*]
  workflow_dispatch:

jobs:
  check-secrets:
    defaults:
      run:
        shell: bash

    runs-on: ubuntu-latest

    steps:
      - name: Checkout CI repo.
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT }}
          repository: internet-identity-labs/ci_libs
          ref: main
          path: ci_libs

      - name: Check secrets
        run: |
          source ./ci_libs/CI_LIBS.sh
          JSON='${{ toJSON(env) }}'
          ci_check_secrets "${JSON}"
        env:
          DFX_IDENTITY_PEM: ${{ secrets.GH_MP_ADMIN_PEM }}
          REACT_APP_SENTRY_CONNECTION: ${{secrets.DEV_SENTRY_CONNECTION}}
          URL_AWS_USER_E2E_GOOGLE: ${{secrets.URL_AWS_USER_E2E_GOOGLE}}
          LAMBDA_IDENTITY: ${{secrets.LAMBDA_IDENTITY}}
          USERGEEK_API_KEY: ${{secrets.PROD_USERGEEK_API_KEY}}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT_NFID }}
          SENTRY_LOG_LEVEL: ${{ secrets.SENTRY_LOG_LEVEL }}
          USER_DATA_DIR: ${{secrets.USER_DATA_DIR}}
          PSYCHEDELIC_GH_NPM_REGISTRY: ${{secrets.PSYCHEDELIC_GH_NPM_REGISTRY}}

  unit-tests:
    needs: check-secrets
    runs-on: ubuntu-latest

    steps:
      - name: Checkout CI repo
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "yarn"

      - name: Add npmrc
        uses: ferluisxd/create-npmrc@3
        with:
          org_name: psychedelic
        env:
          AUTH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Build project
        run: |
          cat > ~/.npmrc << EOF
          @psychedelic:registry=https://npm.pkg.github.com
          //npm.pkg.github.com/:_authToken=${PSYCHEDELIC_GH_NPM_REGISTRY}
          EOF
          yarn --prefer-offline

        env:
          PSYCHEDELIC_GH_NPM_REGISTRY: ${{secrets.PSYCHEDELIC_GH_NPM_REGISTRY}}

      - name: Run unit tests
        run: npx nx test nfid-frontend

  e2e-tests:
    needs: check-secrets
    runs-on: ubuntu-latest
    concurrency:
      group: ci-frontend-test
      cancel-in-progress: false

    steps:
      - run: pwd

      - name: Checkout CI repo
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "yarn"

      - name: Build project
        run: |
          cat > ~/.npmrc << EOF
          @psychedelic:registry=https://npm.pkg.github.com
          //npm.pkg.github.com/:_authToken=${PSYCHEDELIC_GH_NPM_REGISTRY}
          EOF
          yarn --prefer-offline
          npx env-cmd -f .env.staging nx build nfid-frontend
          yarn serve -l 9090 -s dist/apps/nfid-frontend &
        env:
          IS_DEV: true
          IS_E2E_TEST: true
          CURRCONV_TOKEN: ${{secrets.CURRCONV_TOKEN}}

          REACT_APP_SENTRY_CONNECTION: ${{secrets.DEV_SENTRY_CONNECTION}}
          USERGEEK_API_KEY: ${{secrets.PROD_USERGEEK_API_KEY}}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT_NFID }}
          SENTRY_LOG_LEVEL: ${{ secrets.SENTRY_LOG_LEVEL }}
          PSYCHEDELIC_GH_NPM_REGISTRY: ${{secrets.PSYCHEDELIC_GH_NPM_REGISTRY}}

      - name: Setup chrome browser
        uses: browser-actions/setup-chrome@latest

      - name: Chrome version
        run: chrome --version

      - name: Checkout Google user E2E
        uses: actions/checkout@v3
        with:
          repository: internet-identity-labs/user-google-e2e
          path: apps/nfid-frontend-e2e/user-google-e2e
          ref: main
          token: ${{ secrets.PAT }}

      - run: ls -la apps/nfid-frontend-e2e/user-google-e2e

      - name: Running E2E test
        run: |
          npx env-cmd -f .env.staging nx test:e2e nfid-frontend-e2e
          # npx nx test:e2e:mobile nfid-frontend-e2e
        env:
          URL_AWS_USER_E2E_GOOGLE: ${{secrets.URL_AWS_USER_E2E_GOOGLE}}
          LAMBDA_IDENTITY: ${{secrets.LAMBDA_IDENTITY}}
          USER_DATA_DIR: ${{secrets.USER_DATA_DIR}}

      - name: Generate HTML Report
        if: always()
        run: npx nx generate-cucumber-html-report nfid-frontend-e2e

      - name: Final Test Reports
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: wdio-report
          path: apps/nfid-frontend-e2e/test/reporter

      - name: Upload build artefacts
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: dist
          path: dist
