name: DEV Deployment
on:
  workflow_dispatch:
  push:
    branches:
      - main
      - staging

env:
  CANISTER_NAME: "nfid-demo"
  CI_DEBUG: "true"

jobs:
  check-secrets:
    name: Check Secrets
    defaults:
      run:
        shell: bash

    runs-on: ubuntu-latest

    steps:
      - name: Checkout CI repo.
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          repository: internet-identity-labs/ci_libs
          ref: main
          path: ci_libs

      - name: Check secrets
        run: |
          source "${{ github.workspace }}/ci_libs/CI_LIBS.sh"
          JSON='${{ toJSON(env) }}'
          ci_check_secrets "${JSON}"
        env:
          USERGEEK_API_KEY: ${{secrets.PROD_USERGEEK_API_KEY}}
          ETHERSCAN_API_KEY: ${{secrets.ETHERSCAN_API_KEY}}
          RARIBLE_X_API_KEY: ${{secrets.RARIBLE_X_API_KEY}}
          PROD_RARIBLE_X_API_KEY: ${{secrets.PROD_RARIBLE_X_API_KEY}}
          ETH_ALCHEMY_API_KEY: ${{secrets.ETH_ALCHEMY_API_KEY}}
          MATIC_ALCHEMY_API_KEY: ${{secrets.MATIC_ALCHEMY_API_KEY}}
          MUMBAI_ALCHEMY_API_KEY: ${{secrets.MUMBAI_ALCHEMY_API_KEY}}
          RAMP_WALLET_API_KEY: ${{secrets.RAMP_WALLET_API_KEY}}
          PSYCHEDELIC_GH_NPM_REGISTRY: ${{secrets.PSYCHEDELIC_GH_NPM_REGISTRY}}
          BLOCK_CYPHER_TOKEN: ${{secrets.BLOCK_CYPHER_TOKEN_DEV}}
          MAINNET_RARIBLE_X_API_KEY: ${{secrets.MAINNET_RARIBLE_X_API_KEY}}
          SENTRY_AUTH_TOKEN: ${{secrets.SENTRY_AUTH_TOKEN}}
          SENTRY_ORG: ${{secrets.SENTRY_ORG}}
          SENTRY_PROJECT: ${{secrets.SENTRY_PROJECT_NFID}}
          SENTRY_LOG_LEVEL: ${{secrets.SENTRY_LOG_LEVEL}}
          CLOUDFLARE_API_TOKEN: ${{secrets.CLOUDFLARE_API_TOKEN}}
          CLOUDFLARE_ACCOUNT_ID: ${{secrets.CLOUDFLARE_ACCOUNT_ID}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

  build-demo:
    name: Build NFID-Demo
    needs: check-secrets
    runs-on: ubuntu-latest
    if: ${{ ! contains( github.ref_name, 'production' ) }}
    steps:
      - name: Checkout repo.
        uses: actions/checkout@v4

      - name: Checkout CI repo.
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          repository: internet-identity-labs/ci_libs
          ref: main
          path: ci_libs

      - name: Checkout sdk-ts repo.
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          repository: internet-identity-labs/sdk-ts
          ref: main
          path: sdk-ts

      - name: Setup DFX 15
        uses: aviate-labs/setup-dfx@v0.2.6
        with:
          dfx-version: 0.15.0
          dfx-disable-encryption: true

      - name: Setup Node 18
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "yarn"

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - name: Cache Node Modules.
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
            **/.eslintcache
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-demo-${{ hashFiles('**/yarn.lock') }}

      - name: Versions
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh
          
          ci_versions

      - name: SDK-TS => Build
        working-directory: ./sdk-ts
        run: |
          source "${{ github.workspace }}/ci_libs/CI_LIBS.sh"

          ci_echo_info "Install ..." >&2
          ci_echo_debug "yarn install --frozen-lockfile" >&2
          yarn install --frozen-lockfile

          ci_echo_debug "yarn lint" >&2
          yarn lint

          ci_echo_info "Build ..." >&2
          ci_echo_debug "npx nx build embed" >&2
          npx nx build embed

      - name: SDK-TS => Create link to packages
        working-directory: ./sdk-ts/dist/packages/embed
        run: |
          source "${{ github.workspace }}/ci_libs/CI_LIBS.sh"
          ci_echo_debug "yarn link" >&2
          yarn link

      - name: NFID-DEMO => Populate env vars.
        run: |
          source "${{ github.workspace }}/ci_libs/CI_LIBS.sh"

          ci_echo_debug "Getting values from dfx.json" >&2
          if ! canister_data=$(cat dfx.json | jq -er ".canisters.\"${CANISTER_NAME}\""); then
            ci_echo_error "Can't found canister '${CANISTER_NAME}' data from dfx.json" >&2
            exit 1
          fi

          CANISTER_BRANCH="${GITHUB_REF_NAME////-}"

          ci_echo_debug "Detecting network for the canister based on the branch." >&2
          case ${CANISTER_BRANCH} in
            staging)
              NETWORK_NAME='stage'
              ENV_FILE='.env.staging'
              ;;
            production)
              ci_echo_error "Branch '${CANISTER_BRANCH}' not allowed for current CI." >&2
              exit 1
              ;;
            *)
              NETWORK_NAME='dev'
              ENV_FILE='.env.dev'
              ;;
          esac

          ci_echo_debug "Populating env variables" >&2
          echo "CANISTER_BRANCH=${CANISTER_BRANCH}" >> $GITHUB_ENV
          echo "NETWORK_NAME=${NETWORK_NAME}" >> $GITHUB_ENV
          echo "ENV_FILE=${ENV_FILE}" >> $GITHUB_ENV

      - name: NFID-DEMO => Print Vars.
        run: |
          source "${{ github.workspace }}/ci_libs/CI_LIBS.sh"

          ci_echo_info "CANISTER_NAME=${CANISTER_NAME}" >&2
          ci_echo_info "CANISTER_BRANCH=${CANISTER_BRANCH}" >&2
          ci_echo_info "NETWORK_NAME=${NETWORK_NAME}" >&2
          ci_echo_info "ENV_FILE=${ENV_FILE}" >&2

      - name: NFID-DEMO => Install
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: |
          source "${{ github.workspace }}/ci_libs/CI_LIBS.sh"

          ci_echo_debug "Preparing npmrc" >&2
          cat > ~/.npmrc << EOF
          @psychedelic:registry=https://npm.pkg.github.com
          //npm.pkg.github.com/:_authToken=${PSYCHEDELIC_GH_NPM_REGISTRY}
          EOF

          ci_echo_info "Yarn link ..." >&2
          ci_echo_debug "yarn link @nfid/embed" >&2
          yarn link @nfid/embed

          ci_echo_debug "yarn --prefer-offline" >&2
          yarn --prefer-offline
        env:
          PSYCHEDELIC_GH_NPM_REGISTRY: ${{secrets.PSYCHEDELIC_GH_NPM_REGISTRY}}

      - name: NFID-DEMO => Build package
        run: |
          source "${{ github.workspace }}/ci_libs/CI_LIBS.sh"

          ci_echo_info "NPX" >&2
          ci_echo_debug "npx env-cmd -f '${ENV_FILE}' nx build '${CANISTER_NAME}'" >&2
          npx env-cmd -f "${ENV_FILE}" nx build "${CANISTER_NAME}"

          ci_echo_debug "dfx build --network '${NETWORK_NAME}' ${CANISTER_NAME}" >&2
          dfx build --network "${NETWORK_NAME}" "${CANISTER_NAME}"

      - name: NFID-DEMO => Save artifact
        uses: actions/upload-artifact@v3
        with:
          name: nfid-demo
          path: |
            build/
            dist/
            .dfx/

  deploy-demo:
    name: Deploy NFID-Demo
    needs: build-demo
    if: ${{ ! contains( github.ref_name, 'production' ) }}
    runs-on:
      group: dfx-runner
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repo.
        uses: actions/checkout@v4

      - name: Checkout CI repo.
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          repository: internet-identity-labs/ci_libs
          ref: main
          path: ci_libs

      - name: Versions
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh
          
          ci_versions

      - name: PRE-DEPLOY => Populate env vars.
        run: |
          source "${{ github.workspace }}/ci_libs/CI_LIBS.sh"

          ci_echo_debug "Getting values from dfx.json" >&2
          if ! canister_data=$(cat dfx.json | jq -er ".canisters.\"${CANISTER_NAME}\""); then
            ci_echo_error "Can't found canister '${CANISTER_NAME}' data from dfx.json" >&2
            exit 1
          fi

          CANISTER_BRANCH="${GITHUB_REF_NAME////-}"

          ci_echo_debug "Detecting network for the canister based on the branch." >&2
          case ${CANISTER_BRANCH} in
            staging)
              NETWORK_NAME='stage'
              ;;
            production)
              ci_echo_error "Branch '${CANISTER_BRANCH}' not allowed for current CI." >&2
              exit 1
              ;;
            *)
              NETWORK_NAME='dev'
              ;;
          esac

          ci_echo_debug "Getting dfx identity for network '${NETWORK_NAME}'" >&2

          if [[ "${NETWORK_NAME}" =~ ^(dev|stage)$ ]]; then
            ID_NAME="dev_admin"
            IDENTITY_PEM_NAME_VAR="DEV_ADMIN_KEY"
          elif [ "${NETWORK_NAME}" == 'ic' ]; then
            ID_NAME="prod_admin"
            IDENTITY_PEM_NAME_VAR="PROD_ADMIN_KEY"
          fi
          ID_PATH="/home/ubuntu/.config/dfx/identity/${ID_NAME}"

          ci_echo_debug "Populating env variables" >&2
          echo "CANISTER_BRANCH=${CANISTER_BRANCH}" >> $GITHUB_ENV
          echo "NETWORK_NAME=${NETWORK_NAME}" >> $GITHUB_ENV
          echo "ID_NAME=${ID_NAME}" >> $GITHUB_ENV
          echo "ID_PATH=${ID_PATH}" >> $GITHUB_ENV
          echo "IDENTITY_PEM_NAME_VAR=${IDENTITY_PEM_NAME_VAR}" >> $GITHUB_ENV

      - name: PRE-DEPLOY => Print Vars.
        run: |
          source "${{ github.workspace }}/ci_libs/CI_LIBS.sh"
          ci_echo_info "NETWORK_NAME=${NETWORK_NAME}" >&2
          ci_echo_info "CANISTER_NAME=${CANISTER_NAME}" >&2
          ci_echo_info "CANISTER_BRANCH=${CANISTER_BRANCH}" >&2
          ci_echo_info "ID_NAME=${ID_NAME}" >&2
          ci_echo_info "ID_PATH=${ID_PATH}" >&2
          ci_echo_info "IDENTITY_PEM_NAME_VAR=${IDENTITY_PEM_NAME_VAR}" >&2

      - name: PRE-DEPLOY => Write identity.
        run: |
          source "${{ github.workspace }}/ci_libs/CI_LIBS.sh"

          mkdir -p "${ID_PATH}"
          echo "${!IDENTITY_PEM_NAME_VAR}" > "${ID_PATH}/identity.pem"

          ci_echo_warn "Preparing encoded key..." >&2
          ci_echo_info "Installing base64 package..." >&2
          sudo apt-get update && sudo apt-get install -y coreutils moreutils

          ci_echo_info "Decoding..." >&2
          base64 -d "${ID_PATH}/identity.pem" | sponge "${ID_PATH}/identity.pem"
        env:
          DEV_ADMIN_KEY: ${{secrets.DEV_ADMIN_KEY}}
          PROD_ADMIN_KEY: ${{secrets.PROD_VAULT_KEY}}

      - name: DEPLOY => Load artifact
        uses: actions/download-artifact@v3
        with:
          name: nfid-demo

      - name: DEPLOY => Deploy to the canister.
        run: |
          source "${{ github.workspace }}/ci_libs/CI_LIBS.sh"

          if [ "${NETWORK_NAME}" == 'ic' ]; then
            CI_DEBUG="true"
          fi

          dfx identity use "${ID_NAME}"

          ci_echo_debug "dfx deploy -y --mode=reinstall --network ${NETWORK_NAME} --no-wallet ${CANISTER_NAME}" >&2
          if ! result=$(dfx deploy -y --mode=reinstall --network "${NETWORK_NAME}" --no-wallet "${CANISTER_NAME}"); then
            ci_echo_error "Deploy failed ${result}" >&2
            exit 1
          fi

          ci_echo_debug "Command output was '${result}'" >&2

          ci_echo_success "Canister '${CANISTER_NAME}' was deployed" >&2

  deploy-cloudflare:
    name: Deploy NFID-Frontend to Cloudflare Pages
    needs: check-secrets
    runs-on: ubuntu-latest
    if: ${{ ! contains( github.ref_name, 'production' ) }}
    permissions:
      contents: read
      deployments: write
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch

      - name: Checkout repo.
        uses: actions/checkout@v4

      - name: Checkout CI repo.
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          repository: internet-identity-labs/ci_libs
          ref: main
          path: ci_libs

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "yarn"

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - name: Cache Node Modules.
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
            **/.eslintcache
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-cloudflare-${{ hashFiles('**/yarn.lock') }}

      - name: Versions
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh
          
          ci_versions

      - name: Install
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: |
          source "${{ github.workspace }}/ci_libs/CI_LIBS.sh"

          ci_echo_debug "yarn --prefer-offline" >&2
          yarn --prefer-offline

      - name: Build
        run: |
          source "${{ github.workspace }}/ci_libs/CI_LIBS.sh"

          ci_echo_debug "yarn build:cloudflare" >&2
          yarn build:cloudflare
        env:
          IS_DEV: true
          IC_HOST: https://ic0.app
          ETHERSCAN_API_KEY: ${{secrets.ETHERSCAN_API_KEY}}
          RARIBLE_X_API_KEY: ${{secrets.RARIBLE_X_API_KEY}}
          MAINNET_RARIBLE_X_API_KEY: ${{secrets.MAINNET_RARIBLE_X_API_KEY}}
          PROD_RARIBLE_X_API_KEY: ${{secrets.PROD_RARIBLE_X_API_KEY}}
          ETH_ALCHEMY_API_KEY: ${{secrets.ETH_ALCHEMY_API_KEY}}
          MATIC_ALCHEMY_API_KEY: ${{secrets.MATIC_ALCHEMY_API_KEY}}
          MUMBAI_ALCHEMY_API_KEY: ${{secrets.MUMBAI_ALCHEMY_API_KEY}}
          RAMP_WALLET_API_KEY: ${{secrets.RAMP_WALLET_API_KEY}}
          REACT_APP_SENTRY_CONNECTION: ${{secrets.DEV_SENTRY_CONNECTION}}
          USERGEEK_API_KEY: ${{secrets.PROD_USERGEEK_API_KEY}}
          PSYCHEDELIC_GH_NPM_REGISTRY: ${{secrets.PSYCHEDELIC_GH_NPM_REGISTRY}}
          BLOCK_CYPHER_TOKEN: ${{secrets.BLOCK_CYPHER_TOKEN_DEV}}
          CF_PAGES_BRANCH: ${{steps.extract_branch.outputs.branch}}

      - name: Publish
        uses: cloudflare/pages-action@1
        with:
          apiToken: ${{secrets.CLOUDFLARE_API_TOKEN}}
          accountId: ${{secrets.CLOUDFLARE_ACCOUNT_ID}}
          gitHubToken: ${{secrets.GITHUB_TOKEN}}
          projectName: nfid-frontend
          directory: dist/apps/nfid-frontend
