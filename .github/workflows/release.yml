name: Deployment
on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      env:
        description: "Environment to run against"
        required: true
        default: 'dev'
        type: choice
        options: 
          - dev
          - stage
          - ic
      confirmation:
          description: 'For the ic deployment - confirm your choice by typing "Yes"'
          type: string
env:
  CANISTER_NAME: "nfid-demo"
  NETWORK_NAME: "${{ github.event.inputs.env || 'dev' }}"
  CI_DEBUG: "true"

jobs:
  check-secrets:
    name: Check Secrets
    environment: "${{ github.event.inputs.env || 'dev' }}"
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-latest

    steps:
      - name: Checkout CI repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          repository: internet-identity-labs/ci_libs
          ref: main
          path: ci_libs

      - name: Check secrets
        run: |
          source "${{ github.workspace }}/ci_libs/CI_LIBS.sh"
          JSON='${{ toJSON(env) }}'
          ci_check_secrets "${JSON}"
        env:
          USERGEEK_API_KEY: ${{secrets.PROD_USERGEEK_API_KEY}}
          ETHERSCAN_API_KEY: ${{secrets.ETHERSCAN_API_KEY}}
          RARIBLE_X_API_KEY: ${{secrets.RARIBLE_X_API_KEY}}
          PROD_RARIBLE_X_API_KEY: ${{secrets.PROD_RARIBLE_X_API_KEY}}
          ETH_ALCHEMY_API_KEY: ${{secrets.ETH_ALCHEMY_API_KEY}}
          MATIC_ALCHEMY_API_KEY: ${{secrets.MATIC_ALCHEMY_API_KEY}}
          MUMBAI_ALCHEMY_API_KEY: ${{secrets.MUMBAI_ALCHEMY_API_KEY}}
          RAMP_WALLET_API_KEY: ${{secrets.RAMP_WALLET_API_KEY}}
          GH_NPM_REGISTRY: ${{secrets.PSYCHEDELIC_GH_NPM_REGISTRY}}
          BLOCK_CYPHER_TOKEN: ${{ vars.BLOCK_CYPHER_TOKEN }}
          MAINNET_RARIBLE_X_API_KEY: ${{secrets.MAINNET_RARIBLE_X_API_KEY}}
          CLOUDFLARE_API_TOKEN: ${{secrets.CLOUDFLARE_API_TOKEN}}
          CLOUDFLARE_ACCOUNT_ID: ${{secrets.CLOUDFLARE_ACCOUNT_ID}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

  build-demo:
    name: Build NFID-Demo
    needs: check-secrets
    runs-on: ubuntu-latest
    environment: "${{ github.event.inputs.env || 'dev' }}"

    steps:
      - name: INPUT => Checks.
        if: ${{ github.event.inputs.confirmation != 'Yes' && github.event.inputs.env == 'ic' }}
        run: |
          echo "[ERROR] You have try release to network 'ic' without or with wrong confirmation phrase" >&2
          exit 1
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Checkout CI repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          repository: internet-identity-labs/ci_libs
          ref: main
          path: ci_libs

      - name: Setup DFX 15
        uses: dfinity/setup-dfx@main
        with:
          dfx-version: 0.15.0

      - name: Setup Node 18
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "yarn"

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - name: Cache Node Modules
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
            **/.eslintcache
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: nfid-fe-yarn

      - name: Versions
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh

          ci_versions

      - name: NFID-DEMO => Populate env vars
        run: |
          source "${{ github.workspace }}/ci_libs/CI_LIBS.sh"

          ci_echo_debug "Getting values from dfx.json" >&2
          if ! canister_data=$(cat dfx.json | jq -er ".canisters.\"${CANISTER_NAME}\""); then
            ci_echo_error "Can't found canister '${CANISTER_NAME}' data from dfx.json" >&2
            exit 1
          fi

          CANISTER_BRANCH="${GITHUB_REF_NAME////-}"

          ENV_FILE=".env.${NETWORK_NAME}"
          OPTIONS=''
          if [ "${NETWORK_NAME}" == 'ic' ]; then
            OPTIONS='--skip-nx-cache'
          fi

          ci_echo_debug "Populating env variables" >&2
          echo "CANISTER_BRANCH=${CANISTER_BRANCH}" >> $GITHUB_ENV
          echo "NETWORK_NAME=${NETWORK_NAME}" >> $GITHUB_ENV
          echo "ENV_FILE=${ENV_FILE}" >> $GITHUB_ENV
          echo "OPTIONS=${OPTIONS}" >> $GITHUB_ENV

      - name: NFID-DEMO => Print Vars
        run: |
          source "${{ github.workspace }}/ci_libs/CI_LIBS.sh"

          ci_echo_info "CANISTER_NAME=${CANISTER_NAME}" >&2
          ci_echo_info "CANISTER_BRANCH=${CANISTER_BRANCH}" >&2
          ci_echo_info "NETWORK_NAME=${NETWORK_NAME}" >&2
          ci_echo_info "ENV_FILE=${ENV_FILE}" >&2
          ci_echo_info "OPTIONS=${OPTIONS}" >&2

      - name: NFID-DEMO => Install
        run: |
          source "${{ github.workspace }}/ci_libs/CI_LIBS.sh"

          ci_echo_debug "Preparing npmrc" >&2
          cat > ~/.npmrc << EOF
          @psychedelic:registry=https://npm.pkg.github.com
          @internet-identity-labs:registry=https://npm.pkg.github.com
          //npm.pkg.github.com/:_authToken=${GH_NPM_REGISTRY}
          EOF

          ci_echo_debug "yarn --prefer-offline" >&2
          yarn --prefer-offline --frozen-lockfile
        env:
          GH_NPM_REGISTRY: ${{secrets.PSYCHEDELIC_GH_NPM_REGISTRY}}

      - name: NFID-DEMO => Build package
        run: |
          source "${{ github.workspace }}/ci_libs/CI_LIBS.sh"

          ci_echo_info "NPX" >&2
          ci_echo_debug "npx env-cmd -f '${ENV_FILE}' nx build '${CANISTER_NAME}' ${OPTIONS}" >&2
          npx env-cmd -f "${ENV_FILE}" nx build "${CANISTER_NAME}" ${OPTIONS}

          ci_echo_debug "dfx build --network '${NETWORK_NAME}' ${CANISTER_NAME}" >&2
          dfx build --network "${NETWORK_NAME}" "${CANISTER_NAME}"

      - name: NFID-DEMO => Save artifact
        uses: actions/upload-artifact@v4
        with:
          name: nfid-demo
          path: |
            build/
            dist/
            .dfx/

  deploy-demo:
    name: Deploy NFID-Demo
    needs: build-demo
    runs-on:
      group: dfx-runner
    environment: "${{ github.event.inputs.env || 'dev' }}"
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Checkout CI repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          repository: internet-identity-labs/ci_libs
          ref: main
          path: ci_libs

      - name: Versions
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh

          ci_versions

      - name: PRE-DEPLOY => Populate env vars
        env:
          DFX_ID_NAME: ${{ vars.DFX_ID_NAME }}
        run: |
          source "${{ github.workspace }}/ci_libs/CI_LIBS.sh"

          ci_echo_debug "Getting values from dfx.json" >&2
          if ! canister_data=$(cat dfx.json | jq -er ".canisters.\"${CANISTER_NAME}\""); then
            ci_echo_error "Can't found canister '${CANISTER_NAME}' data from dfx.json" >&2
            exit 1
          fi

          CANISTER_BRANCH="${GITHUB_REF_NAME////-}"

          ci_echo_debug "Getting dfx identity for network '${NETWORK_NAME}'" >&2

          DFX_ID_PATH="${HOME}/.config/dfx/identity/${DFX_ID_NAME}"

          ci_echo_debug "Populating env variables" >&2
          echo "CANISTER_BRANCH=${CANISTER_BRANCH}" >> $GITHUB_ENV
          echo "NETWORK_NAME=${NETWORK_NAME}" >> $GITHUB_ENV
          echo "DFX_ID_NAME=${DFX_ID_NAME}" >> $GITHUB_ENV
          echo "DFX_ID_PATH=${DFX_ID_PATH}" >> $GITHUB_ENV

      - name: PRE-DEPLOY => Print Vars
        run: |
          source "${{ github.workspace }}/ci_libs/CI_LIBS.sh"

          ci_echo_info "NETWORK_NAME=${NETWORK_NAME}" >&2
          ci_echo_info "CANISTER_NAME=${CANISTER_NAME}" >&2
          ci_echo_info "CANISTER_BRANCH=${CANISTER_BRANCH}" >&2
          ci_echo_info "DFX_ID_NAME=${DFX_ID_NAME}" >&2
          ci_echo_info "DFX_ID_PATH=${DFX_ID_PATH}" >&2
          ci_echo_info "IDENTITY_PEM_NAME_VAR=${IDENTITY_PEM_NAME_VAR}" >&2

      - name: PRE-DEPLOY => Write identity.
        env:
          DFX_ID_KEY: ${{ secrets.DFX_ID_KEY }}
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh

          mkdir -p "${DFX_ID_PATH}"

          ci_echo_warn "Preparing encoded key..." >&2
          echo "${DFX_ID_KEY}" | base64 -d > "${DFX_ID_PATH}/identity.pem"

      - name: DEPLOY => Load artifact
        uses: actions/download-artifact@v4
        with:
          name: nfid-demo

      - name: DEPLOY => Deploy to the canister
        run: |
          source "${{ github.workspace }}/ci_libs/CI_LIBS.sh"

          if [ "${NETWORK_NAME}" == 'ic' ]; then
            CI_DEBUG="true"
          fi

          dfx identity use "${ID_NAME}"

          ci_echo_debug "dfx canister install -y --mode=reinstall --network ${NETWORK_NAME} ${CANISTER_NAME}" >&2
          if ! result=$(dfx canister install -y --mode=reinstall --network "${NETWORK_NAME}" "${CANISTER_NAME}"); then
            ci_echo_error "Install failed ${result}" >&2
            exit 1
          fi

          ci_echo_debug "Command output was '${result}'" >&2

          ci_echo_success "Canister '${CANISTER_NAME}' was installed" >&2

  deploy-cloudflare:
    name: Deploy NFID-Frontend to Cloudflare Pages
    needs: check-secrets
    runs-on: ubuntu-latest
    environment: "${{ github.event.inputs.env || 'dev' }}"
    permissions:
      contents: read
      deployments: write

    steps:
      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch

      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Checkout CI repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          repository: internet-identity-labs/ci_libs
          ref: main
          path: ci_libs

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "yarn"

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - name: Cache Node Modules
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
            **/.eslintcache
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: nfid-fe-yarn-cloudflare

      - name: Versions
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh

          ci_versions

      - name: Install
        run: |
          source "${{ github.workspace }}/ci_libs/CI_LIBS.sh"

          ci_echo_debug "yarn --prefer-offline" >&2
          yarn --prefer-offline --frozen-lockfile

      - name: Build
        run: |
          source "${{ github.workspace }}/ci_libs/CI_LIBS.sh"

          ci_echo_debug "yarn build:cloudflare" >&2
          yarn build:cloudflare
        env:
          IS_DEV: ${{ vars.IS_DEV }}
          IC_HOST: https://ic0.app
          ETHERSCAN_API_KEY: ${{secrets.ETHERSCAN_API_KEY}}
          RARIBLE_X_API_KEY: ${{secrets.RARIBLE_X_API_KEY}}
          MAINNET_RARIBLE_X_API_KEY: ${{secrets.MAINNET_RARIBLE_X_API_KEY}}
          PROD_RARIBLE_X_API_KEY: ${{secrets.PROD_RARIBLE_X_API_KEY}}
          ETH_ALCHEMY_API_KEY: ${{secrets.ETH_ALCHEMY_API_KEY}}
          MATIC_ALCHEMY_API_KEY: ${{secrets.MATIC_ALCHEMY_API_KEY}}
          MUMBAI_ALCHEMY_API_KEY: ${{secrets.MUMBAI_ALCHEMY_API_KEY}}
          RAMP_WALLET_API_KEY: ${{secrets.RAMP_WALLET_API_KEY}}
          USERGEEK_API_KEY: ${{secrets.PROD_USERGEEK_API_KEY}}
          GH_NPM_REGISTRY: ${{secrets.PSYCHEDELIC_GH_NPM_REGISTRY}}
          BLOCK_CYPHER_TOKEN: ${{ vars.BLOCK_CYPHER_TOKEN }}
          CF_PAGES_BRANCH: ${{steps.extract_branch.outputs.branch}}

      - name: Publish
        uses: cloudflare/pages-action@1
        with:
          apiToken: ${{secrets.CLOUDFLARE_API_TOKEN}}
          accountId: ${{secrets.CLOUDFLARE_ACCOUNT_ID}}
          gitHubToken: ${{secrets.GITHUB_TOKEN}}
          projectName: nfid-frontend
          directory: dist/apps/nfid-frontend
