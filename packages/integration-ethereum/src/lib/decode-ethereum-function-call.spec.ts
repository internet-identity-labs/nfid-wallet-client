import {
  decode,
  decodeTokenByAssetClass,
} from "./decode-ethereum-function-call"

describe("Decode function call data.", () => {
  it("should return accept bid request", async () => {
    const encoded =
      "0x67d49a3b0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000dc75e8c3ae765d8947adbc6698a2403a6141d439000000000000000000000000000000000000000000000000000000000000000173ad21460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000b4fbf271143f4fbf7b91a5ded31805e42b2208d649a42ea63f5a174f77a0fd025f9ee12230066371c3a45fd3d7933fbc554bc9be000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001b18cdf600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000003600000000000000000000000000000000000000000000000000000000000000040000000000000000000000000d8560c88d1dc85f9ed05b25878e366c49b68bef93eb89979bd2468b0fc0ed83cbf3fec379969c5e3000000000000000000000012000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012345678900000000000000000000000000123456789face09616c6c64617461000000000000000000000000000000000000000000000000000000000000004131190526938979801e86b7aff3b6c2e370168671de61e74348b06cbe1e9cf9403292228a201a9e31adb8066d553ae367b0b9cad2ccd86b7c0c006d6f510854db1c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e8000000000000000000000000000000000000000000000000000000000000000012345678900000000000000000000000000123456789face09616c6c64617461"
    const decoded = await decode(encoded)
    expect(decoded).toEqual({
      interface: "DirectAcceptBid",
      method: "directAcceptBid",
      data: {
        bidData:
          "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012345678900000000000000000000000000123456789face09616c6c64617461",
        bidDataType: "0x1b18cdf6",
        bidEnd: "0",
        bidMaker: "0xdC75e8c3aE765D8947aDBC6698a2403A6141D439",
        bidNftAmount: "1",
        bidPaymentAmount: "10000000000000000",
        bidSalt:
          "33308922827556936180302928474965367857990788993084799988873425059098267470270",
        bidSignature:
          "0x31190526938979801e86b7aff3b6c2e370168671de61e74348b06cbe1e9cf9403292228a201a9e31adb8066d553ae367b0b9cad2ccd86b7c0c006d6f510854db1c",
        bidStart: "0",
        nft: {
          interface: "Item",
          method: "sell",
          data: expect.objectContaining({
            id: "ETHEREUM:0xd8560c88d1dc85f9ed05b25878e366c49b68bef9:28369555721345345376156468705960426739116538599175521796431207211942537068562",
            collectionData: expect.objectContaining({
              id: "ETHEREUM:0xd8560c88d1dc85f9ed05b25878e366c49b68bef9",
            }),
          }),
        },
        paymentToken: "0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6",
        sellOrderData:
          "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e80000000000000000000000000000000000000000000000000000000000000000",
        sellOrderNftAmount: "1",
        sellOrderPaymentAmount: "10000000000000000",
      },
    })
  })

  it("should return burn request", async () => {
    const encoded =
      "0x42966c68b58967989c8e878de4d7e78965e066f26b2d9bf4000000000000000000000002"
    const decoded = await decode(encoded)
    expect(decoded).toEqual({
      interface: "Burn",
      method: "burn",
      data: {
        tokenId:
          "82111398635718818523090306183923969391174023738666600495517475675797389836290",
      },
    })
  })

  it("should return transfer request", async () => {
    const encoded =
      "0xf242432a000000000000000000000000382901144a77bec53493fa090053b9c63da5dd07000000000000000000000000dc75e8c3ae765d8947adbc6698a2403a6141d439843c6b52aea14305d2b9c8ab781a1bf714e98234000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000"
    const decoded = await decode(encoded)
    expect(decoded).toEqual({
      interface: "SafeTransferFrom",
      method: "safeTransferFrom",
      data: {
        amount: "1",
        data: "0x00",
        from: "0x382901144A77BEC53493FA090053B9c63Da5dD07",
        id: "59812047552843277631894088311125038710126744711430293397554259992232364867585",
        to: "0xdC75e8c3aE765D8947aDBC6698a2403A6141D439",
      },
    })
  })

  it("should return batch buy request", async () => {
    const encoded =
      "0xb94ee332000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000062000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011c37937e080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000005240d5f7d35000000000000000000000000000000000000000000000000000000000000002000000000000000000000000012b231cd11e525f6a0320fc0864928235a203c7d0000000000000000000000000000000000000000000000000000000000000032973bb6400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000003782dace9d9000000000000000000000000000000000000000000000000000000000000000000000d8f39a23d723316642aac461719eff3e792ad54a452bc572a258d7c4a3031e1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000646df4d923d235ef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000003600000000000000000000000000000000000000000000000000011c37937e08000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000003e00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000e2de2249cf1c9d76eaf24257b85bbe83bd218a0bd6ffd79b52a587a0a9941a61f4e6cb0d386d545800000000000000000000000000000000000000000000000000000000000000fa0000000000000000000000000000000000000000000000000000000000000041fd702630bab21665e4c3e3362e3d8cf1b5fea0578e036d9ee0d7d12b66121cae7f6268f6b0eedc985c569f30ddaa9356d1403dd499d50651c848c1904a1582cd1c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000382901144a77bec53493fa090053b9c63da5dd070000000000000000000000000000000000000000000000000000000000002710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000005240d5f7d350000000000000000000000000000000000000000000000000000000000000020000000000000000000000000e213a16b958d5f11bdda167e5850e074f3f583a70000000000000000000000000000000000000000000000000000000000000005973bb6400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000001c6bf52634000000000000000000000000000000000000000000000000000000000000000000003007bd48de90ec17adb9f85bf1cc9f95f8808b4f9b9e32c6c57a6cd646af3180000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000023d235ef000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000005af3107a4000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000003e000000000000000000000000000000000000000000000000000000000000000400000000000000000000000008a1d516d73fb36227d6ded260888c42bb7c55cfae213a16b958d5f11bdda167e5850e074f3f583a700000000000000000000000d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a0d586e322616c3a4ad7b5a5fcaeb9ed5e9fe9e000000000000000000000000000000000000000000000000000000000000000fa00000000000000000000000000000000000000000000000000000000000000410c790e4b6a25db3b6fc75d90f77fc238402f26b9a6bb807e5fd3456db5708d9f4c78277e21b52d1099e8f215e0922b083aa21705ea84710e2c3116fd95a4ae8c1b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000382901144a77bec53493fa090053b9c63da5dd07000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012345678900000000000000000000000000123456789face09616c6c64617461"
    const decoded = await decode(encoded)
    expect(decoded).toEqual({
      interface: "BatchBuyRequest",
      method: "bulkPurchase",
      data: {
        allowFail: true,
        feeRecipientFirst: 0,
        feeRecipientSecond: 0,
        items: [
          {
            amount: "5000000000000000",
            fees: "0",
            marketId: 0,
            item: {
              interface: "Item",
              method: "directPurchase",
              data: expect.objectContaining({
                id: "ETHEREUM:0xe2de2249cf1c9d76eaf24257b85bbe83bd218a0b:8",
                collectionData: expect.objectContaining({
                  id: "ETHEREUM:0xe2de2249cf1c9d76eaf24257b85bbe83bd218a0b",
                }),
              }),
            },
          },
          {
            amount: "100000000000000",
            fees: "0",
            marketId: 0,
            item: {
              interface: "Item",
              method: "directPurchase",
              data: expect.objectContaining({
                id: "ETHEREUM:0x8a1d516d73fb36227d6ded260888c42bb7c55cfa:102257387955674808005262260500339716470980428561394510828930510526251735711757",
                collectionData: expect.objectContaining({
                  id: "ETHEREUM:0x8a1d516d73fb36227d6ded260888c42bb7c55cfa",
                }),
              }),
            },
          },
        ],
      },
    })
  })

  it("should return mint request", async () => {
    const encoded =
      "0x22a775b60000000000000000000000000000000000000000000000000000000000000040000000000000000000000000382901144a77bec53493fa090053b9c63da5dd07382901144a77bec53493fa090053b9c63da5dd0700000000000000000000000300000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000022f350000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000382901144a77bec53493fa090053b9c63da5dd0700000000000000000000000000000000000000000000000000000000000027100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000"
    const decoded = await decode(encoded)
    expect(decoded).toEqual({
      interface: "MintRequest",
      method: "mintAndTransfer",
      data: {
        tokenId:
          "25401967699106481540155849913047907292577987798126179582654568808421886263299",
        tokenURI: "/5",
        creators: [
          {
            creator: "0x382901144A77BEC53493FA090053B9c63Da5dD07",
            value: "10000",
          },
        ],
        royalties: [],
        signatures: ["0x"],
        to: "0x382901144A77BEC53493FA090053B9c63Da5dD07",
      },
    })
  })

  it("should return private collection request ", async () => {
    const encoded =
      "0x72397ad500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160a1d7182ab23e88ab748788fa082953f2675f2b0ee487ea91fdf1743c023b3657000000000000000000000000000000000000000000000000000000000000000d4d7920436f6c6c656374696f6e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000054d59434f4c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001368747470733a2f2f6578616d706c652e636f6d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001368747470733a2f2f6578616d706c652e636f6d00000000000000000000000000"
    const decoded = await decode(encoded)
    expect(decoded).toEqual({
      interface: "CollectionRequest",
      method: "createToken",
      data: {
        name: "My Collection",
        symbol: "MYCOL",
        baseURI: "https://example.com",
        contractURI: "https://example.com",
        isPrivate: true,
      },
    })
  })

  it("should return public collection request ", async () => {
    const encoded =
      "0x27050d1f00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001c0b48b8d153dcbc76af384d7c68859db6a9aaa7e5dbbce62da4be5bd5e85ef1303000000000000000000000000000000000000000000000000000000000000000d4d7920436f6c6c656374696f6e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000054d59434f4c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001368747470733a2f2f6578616d706c652e636f6d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001368747470733a2f2f6578616d706c652e636f6d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    const decoded = await decode(encoded)
    expect(decoded).toEqual({
      interface: "CollectionRequest",
      method: "createToken",
      data: {
        name: "My Collection",
        symbol: "MYCOL",
        baseURI: "https://example.com",
        contractURI: "https://example.com",
        isPrivate: false,
      },
    })
  })

  it("should return buy tokenId for 721_LAZY", async () => {
    const encoded =
      "0x0d5f7d35000000000000000000000000000000000000000000000000000000000000002000000000000000000000000006da1d898598933d6b4bae08e73520f3d9f662c50000000000000000000000000000000000000000000000000000000000000001d8f960c10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000016bcc41e900000000000000000000000000000000000000000000000000000000000000000000e423c57286501476ba845d311d360c9978dde138c742d19b5be39100f7751f330000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000023d235ef000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000480000000000000000000000000000000000000000000000000000000000000056000000000000000000000000000000000000000000000000000016bcc41e90000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000005e00000000000000000000000000000000000000000000000000000000000000280000000000000000000000000d8560c88d1dc85f9ed05b25878e366c49b68bef9000000000000000000000000000000000000000000000000000000000000004006da1d898598933d6b4bae08e73520f3d9f662c500000000000000000000000800000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000002e516d5764376b485564657831777634347a6a62544661716770487637595772756e795663523752767234316b7737000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000006da1d898598933d6b4bae08e73520f3d9f662c500000000000000000000000000000000000000000000000000000000000027100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000041e43665d8357025cb9d59f6d52076bff37512554f22b2b07895d3fb371aed9b6518041ca82c1156d11bb93be3331cc7c3c6ec52ad089b3728a88568e53f3456e51b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041a3eda989eddd3246f8b33223fefacca8152d7e32e03f686e1d554eb31ccf03e2390b1a0ced6728c12843a5eccf9a23392b252de162f604bdeb38e8739d8172601c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012345678900000000000000000000000000123456789face09616c6c64617461"
    const actual = await decode(encoded)
    console.log(JSON.stringify(actual))
    expect(actual).toEqual(
      expect.objectContaining({
        interface: "Item",
        method: "directPurchase",
        data: expect.objectContaining({
          blockchain: "ETHEREUM",
          collection: expect.stringMatching(
            /ETHEREUM:0xd8560c88d1dc85f9ed05b25878e366c49b68bef9/i,
          ),
          contract: expect.stringMatching(
            /ETHEREUM:0xd8560c88d1dc85f9ed05b25878e366c49b68bef9/i,
          ),
          tokenId: expect.stringMatching(
            /3099253609847337010599495937138288429512178397116104279154407086947014017032/i,
          ),
        }),
      }),
    )
  })

  it("should return buy tokenId for 1155_LAZY", async () => {
    const encoded =
      "0x0d5f7d3500000000000000000000000000000000000000000000000000000000000000200000000000000000000000007857aeb275ce51f7c3338d9f4d2676a329a021ec00000000000000000000000000000000000000000000000000000000000000151cdfaa400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000b1310c5a2c30000000000000000000000000000000000000000000000000000000000000000000069bf9b535572ee716ee80117dc951e6136bc9d473b2e112e03957286d52afdea0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000023d235ef0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004e000000000000000000000000000000000000000000000000000000000000005c0000000000000000000000000000000000000000000000000010e0198eaee00000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000002e00000000000000000000000007c4b13b5893cd82f371c5e28f12fb2f37542bbc500000000000000000000000000000000000000000000000000000000000000407857aeb275ce51f7c3338d9f4d2676a329a021ec00000000000000000000005d00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000150000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000000342f697066732f516d664d574c6b6545384d6b65763757527173586574474246395551334a517464414735704c76596e514259673700000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007857aeb275ce51f7c3338d9f4d2676a329a021ec000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007857aeb275ce51f7c3338d9f4d2676a329a021ec00000000000000000000000000000000000000000000000000000000000002580000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000410cfd11fba6c30c1c877a0ee0531bee3271d681c693142c9f01420facda29afe7262aeae17f75dc24d05206dcb5b441393e92c8d78ad0e52e906e1bb6d1f45fd11c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041ede8c7a3471771fe081d52ba6604f28d38411091cc9f9da4de29c8ef1993865f471fa29ae18d9b366aef39230598ed10670d1758c0da3f8a0f521151ae7733e81b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012345678900000000000000000000000000123456789face09616c6c64617461"
    const actual = await decode(encoded)

    expect(actual).toEqual(
      expect.objectContaining({
        interface: "Item",
        method: "directPurchase",
        data: expect.objectContaining({
          blockchain: "ETHEREUM",
          collection: expect.stringMatching(
            /ETHEREUM:0x7c4B13B5893cD82f371c5e28f12FB2F37542BbC5/i,
          ),
          contract: expect.stringMatching(
            /ETHEREUM:0x7c4B13B5893cD82f371c5e28f12FB2F37542BbC5/i,
          ),
          tokenId: expect.stringMatching(
            /54432463239768947679520813681406064870422328906862735308373753226626766733405/i,
          ),
        }),
      }),
    )
  })

  it("should return buy tokenId for 1155", async () => {
    const encoded =
      "0x0d5f7d350000000000000000000000000000000000000000000000000000000000000020000000000000000000000000913aa8fe2516752ba1a74a0f1d5168b43977a4310000000000000000000000000000000000000000000000000000000000000001973bb6400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000174876e8000000000000000000000000000000000000000000000000000000000000000000daa6bcdee654340b8bdb432562980f51c8395cafa0c36a027210b05bc87400b90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006425cdbf23d235ef0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002400000000000000000000000000000000000000000000000000000000000000360000000000000000000000000000000000000000000000000000000174876e800000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000003e00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000f4910c763ed4e47a585e2d34baa9a4b611ae448cd5be662cf4d6d9722990ca2cdd16bf53ecb943250000000000000a00000000010000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000d6ffd79b52a587a0a9941a61f4e6cb0d386d545800000000000000000000000000000000000000000000000000000000000000fa00000000000000000000000000000000000000000000000000000000000000412c37d0c3b23b1ef0cf99a8273304923539c483e42a004f915ece1f76f2adefd11888154d97a597ce688dd2644a627d23c8cfaab3cbed10742935c6bded14e2101b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012345678900000000000000000000000000123456789face09616c6c64617461"
    const actual = await decode(encoded)

    expect(actual).toEqual(
      expect.objectContaining({
        interface: "Item",
        method: "directPurchase",
        data: expect.objectContaining({
          blockchain: "ETHEREUM",
          collection: expect.stringMatching(
            /ETHEREUM:0xf4910C763eD4e47A585E2D34baA9A4b611aE448C/i,
          ),
          contract: expect.stringMatching(
            /ETHEREUM:0xf4910C763eD4e47A585E2D34baA9A4b611aE448C/i,
          ),
          tokenId: expect.stringMatching(
            /96679042880693242821382367246033072756415480234129085295252366780302115209217/i,
          ),
        }),
      }),
    )
  })

  it("should return buy tokenId for 721", async () => {
    const encoded =
      "0x0d5f7d350000000000000000000000000000000000000000000000000000000000000020000000000000000000000000f5156e07f9e10c6a6a308d8fe1ad912e983c534a000000000000000000000000000000000000000000000000000000000000000173ad21460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000003faa2522600000000000000000000000000000000000000000000000000000000000000000001d5a5143913695b0f3cd1bd3695b2311064feb1e994bd8a125f31b01269720860000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000023d235ef000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000003faa25226000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000003a00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000d8560c88d1dc85f9ed05b25878e366c49b68bef9be55859659f74e70899c5832b493043361e8c31c00000000000000000000000900000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000415edfafb5e08423c10f853daa2443cd7c8a9595206a90e247028363735e94d79e441e78dbf25dd509446096b94e79e605288d9b875288ed28d5f338a33f7a048c1b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012345678900000000000000000000000000123456789face09616c6c64617461"
    const actual = await decode(encoded)

    expect(actual).toEqual(
      expect.objectContaining({
        interface: "Item",
        method: "directPurchase",
        data: expect.objectContaining({
          blockchain: "ETHEREUM",
          collection: expect.stringMatching(
            /ETHEREUM:0xD8560C88D1DC85f9ED05b25878E366c49B68bEf9/i,
          ),
          contract: expect.stringMatching(
            /ETHEREUM:0xD8560C88D1DC85f9ED05b25878E366c49B68bEf9/i,
          ),
          tokenId: expect.stringMatching(
            /86090545217057429589019094455964497579787873809883022909766658167983963111433/i,
          ),
        }),
      }),
    )
  })

  it("should return buy tokenId for 721 by assetClass", async () => {
    const type = "0x73ad2146"
    const data =
      "0x000000000000000000000000d8560c88d1dc85f9ed05b25878e366c49b68bef93eb89979bd2468b0fc0ed83cbf3fec379969c5e3000000000000000000000012"
    const actual = await decodeTokenByAssetClass(type, data)

    expect(actual).toEqual(
      expect.objectContaining({
        interface: "Item",
        method: "sell",
        data: expect.objectContaining({
          blockchain: "ETHEREUM",
          collection: expect.stringMatching(
            /ETHEREUM:0xd8560c88d1dc85f9ed05b25878e366c49b68bef9/i,
          ),
          contract: expect.stringMatching(
            /ETHEREUM:0xd8560c88d1dc85f9ed05b25878e366c49b68bef9/i,
          ),
          tokenId: expect.stringMatching(
            /28369555721345345376156468705960426739116538599175521796431207211942537068562/i,
          ),
        }),
      }),
    )
  })
})
