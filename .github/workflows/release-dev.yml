name: DEV Deployment
on:
  workflow_dispatch:
  push:
    branches:
      - main
      - staging

env:
  CANISTER_NAME: 'nfid-demo'
  CI_DEBUG: 'true'

jobs:
  check-secrets:
    name: Check Secrets
    defaults:
      run:
        shell: bash

    runs-on: ubuntu-latest

    steps:
      - name: Checkout CI repo.
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          repository: internet-identity-labs/ci_libs
          ref: main
          path: ci_libs

      - name: Check secrets
        run: |
          source ./ci_libs/CI_LIBS.sh
          JSON='${{ toJSON(env) }}'
          ci_check_secrets "${JSON}"
        env:
          USERGEEK_API_KEY: ${{secrets.PROD_USERGEEK_API_KEY}}
          ETHERSCAN_API_KEY: ${{secrets.ETHERSCAN_API_KEY}}
          GOERLI_ALCHEMY_API_KEY: ${{secrets.GOERLI_ALCHEMY_API_KEY}}
          RARIBLE_X_API_KEY: ${{secrets.RARIBLE_X_API_KEY}}
          PROD_RARIBLE_X_API_KEY: ${{secrets.PROD_RARIBLE_X_API_KEY}}
          ETH_ALCHEMY_API_KEY: ${{secrets.ETH_ALCHEMY_API_KEY}}
          MATIC_ALCHEMY_API_KEY: ${{secrets.MATIC_ALCHEMY_API_KEY}}
          MUMBAI_ALCHEMY_API_KEY: ${{secrets.MUMBAI_ALCHEMY_API_KEY}}
          RAMP_WALLET_API_KEY: ${{secrets.RAMP_WALLET_API_KEY}}
          PSYCHEDELIC_GH_NPM_REGISTRY: ${{secrets.PSYCHEDELIC_GH_NPM_REGISTRY}}
          BLOCK_CYPHER_TOKEN: ${{secrets.BLOCK_CYPHER_TOKEN_DEV}}
          MAINNET_RARIBLE_X_API_KEY: ${{secrets.MAINNET_RARIBLE_X_API_KEY}}

  deploy-demo:
    name: Deploy NFID-Demo
    needs: check-secrets
    runs-on: ubuntu-latest
    if: ${{ ! contains( github.ref_name, 'production' ) }}
    steps:
      - name: Checkout repo.
        uses: actions/checkout@v4

      - name: Checkout CI repo.
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          repository: internet-identity-labs/ci_libs
          ref: main
          path: ci_libs

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "yarn"

      - name: Install DFX.
        uses: aviate-labs/setup-dfx@v0.2.6
        with:
          dfx-version: 0.15.0
          dfx-disable-encryption: true
        env:
          DFX_IDENTITY_PEM: ${{ secrets.GH_MP_ADMIN_PEM }}

      - name: PRE-BUILD => Populate env vars.
        run: |
          source ./ci_libs/CI_LIBS.sh

          ci_echo_debug "Getting values from dfx.json" >&2
          if ! canister_data=$(cat dfx.json | jq -er ".canisters.\"${CANISTER_NAME}\""); then
            ci_echo_error "Can't found canister '${CANISTER_NAME}' data from dfx.json" >&2
            exit 1
          fi

          CANISTER_BRANCH="${GITHUB_REF_NAME////-}"

          ci_echo_debug "Detecting network for the canister based on the branch." >&2
          case ${CANISTER_BRANCH} in
            staging)
              NETWORK_NAME='stage'
              ENV_FILE='.env.staging'
              ;;
            production)
              ci_echo_error "Branch '${CANISTER_BRANCH}' not allowed for current CI." >&2
              exit 1
              ;;
            *)
              NETWORK_NAME='dev'
              ENV_FILE='.env.dev'
              ;;
          esac

          ci_echo_debug "Populating env variables" >&2          
          echo "CANISTER_BRANCH=${CANISTER_BRANCH}" >> $GITHUB_ENV
          echo "NETWORK_NAME=${NETWORK_NAME}" >> $GITHUB_ENV
          echo "ENV_FILE=${ENV_FILE}" >> $GITHUB_ENV

      - name: PRE-BUILD => Print Vars.
        run: |
          source ./ci_libs/CI_LIBS.sh
          ci_echo_info "CANISTER_NAME=${CANISTER_NAME}" >&2
          ci_echo_info "CANISTER_BRANCH=${CANISTER_BRANCH}" >&2
          ci_echo_info "NETWORK_NAME=${NETWORK_NAME}" >&2
          ci_echo_info "ENV_FILE=${ENV_FILE}" >&2

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - name: Cache Node Modules.
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
            **/.eslintcache
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-demo-${{ hashFiles('**/yarn.lock') }}

      - name: NFID-DEMO => Install
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: |
          source ./ci_libs/CI_LIBS.sh

          ci_echo_debug "Preparing npmrc" >&2
          cat > ~/.npmrc << EOF
          @psychedelic:registry=https://npm.pkg.github.com
          //npm.pkg.github.com/:_authToken=${PSYCHEDELIC_GH_NPM_REGISTRY}
          EOF

          ci_echo_debug "yarn --prefer-offline" >&2
          yarn --prefer-offline
        env:
          PSYCHEDELIC_GH_NPM_REGISTRY: ${{secrets.PSYCHEDELIC_GH_NPM_REGISTRY}}

      - name: NFID-DEMO => Deploy
        run: |
          source ./ci_libs/CI_LIBS.sh
          
          ci_echo_info "NPX" >&2
          ci_echo_debug "npx env-cmd -f '${ENV_FILE}' nx build '${CANISTER_NAME}'" >&2
          npx env-cmd -f "${ENV_FILE}" nx build "${CANISTER_NAME}"

          ci_echo_info "DFX" >&2
          dfx identity use action

          ci_echo_debug "dfx deploy --network '${NETWORK_NAME}' '${CANISTER_NAME}' --no-wallet" >&2
          dfx deploy --network "${NETWORK_NAME}" "${CANISTER_NAME}" --no-wallet
        env:
          IS_DEV: true
          IC_HOST: https://icp0.io
          ETHERSCAN_API_KEY: ${{secrets.ETHERSCAN_API_KEY}}
          GOERLI_ALCHEMY_API_KEY: ${{secrets.GOERLI_ALCHEMY_API_KEY}}
          RARIBLE_X_API_KEY: ${{secrets.RARIBLE_X_API_KEY}}
          PROD_RARIBLE_X_API_KEY: ${{secrets.PROD_RARIBLE_X_API_KEY}}
          ETH_ALCHEMY_API_KEY: ${{secrets.ETH_ALCHEMY_API_KEY}}
          MATIC_ALCHEMY_API_KEY: ${{secrets.MATIC_ALCHEMY_API_KEY}}
          MUMBAI_ALCHEMY_API_KEY: ${{secrets.MUMBAI_ALCHEMY_API_KEY}}
          RAMP_WALLET_API_KEY: ${{secrets.RAMP_WALLET_API_KEY}}
          REACT_APP_SENTRY_CONNECTION: ${{secrets.DEV_SENTRY_CONNECTION}}
          USERGEEK_API_KEY: ${{secrets.PROD_USERGEEK_API_KEY}}
          PSYCHEDELIC_GH_NPM_REGISTRY: ${{secrets.PSYCHEDELIC_GH_NPM_REGISTRY}}
          BLOCK_CYPHER_TOKEN: ${{secrets.BLOCK_CYPHER_TOKEN_DEV}}

  deploy-cloudflare:
    name: Deploy NFID-Frontend to Cloudflare Pages
    needs: check-secrets
    runs-on: ubuntu-latest
    if: ${{ ! contains( github.ref_name, 'production' ) }}
    permissions:
      contents: read
      deployments: write
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch

      - name: Checkout
        uses: actions/checkout@v4

      - name: Checkout CI repo.
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          repository: internet-identity-labs/ci_libs
          ref: main
          path: ci_libs

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "yarn"

      - name: Build
        run: |
          source ./ci_libs/CI_LIBS.sh
            
          ci_echo_info "Yarn" >&2
          yarn --prefer-offline

          ci_echo_debug "yarn build:cloudflare" >&2
          yarn build:cloudflare
        env:
          IS_DEV: true
          IC_HOST: https://icp0.io
          ETHERSCAN_API_KEY: ${{secrets.ETHERSCAN_API_KEY}}
          GOERLI_ALCHEMY_API_KEY: ${{secrets.GOERLI_ALCHEMY_API_KEY}}
          RARIBLE_X_API_KEY: ${{secrets.RARIBLE_X_API_KEY}}
          MAINNET_RARIBLE_X_API_KEY: ${{secrets.MAINNET_RARIBLE_X_API_KEY}}
          PROD_RARIBLE_X_API_KEY: ${{secrets.PROD_RARIBLE_X_API_KEY}}
          ETH_ALCHEMY_API_KEY: ${{secrets.ETH_ALCHEMY_API_KEY}}
          MATIC_ALCHEMY_API_KEY: ${{secrets.MATIC_ALCHEMY_API_KEY}}
          MUMBAI_ALCHEMY_API_KEY: ${{secrets.MUMBAI_ALCHEMY_API_KEY}}
          RAMP_WALLET_API_KEY: ${{secrets.RAMP_WALLET_API_KEY}}
          REACT_APP_SENTRY_CONNECTION: ${{secrets.DEV_SENTRY_CONNECTION}}
          USERGEEK_API_KEY: ${{secrets.PROD_USERGEEK_API_KEY}}
          PSYCHEDELIC_GH_NPM_REGISTRY: ${{secrets.PSYCHEDELIC_GH_NPM_REGISTRY}}
          BLOCK_CYPHER_TOKEN: ${{secrets.BLOCK_CYPHER_TOKEN_DEV}}
          CF_PAGES_BRANCH: ${{steps.extract_branch.outputs.branch}}

      - name: Publish
        uses: cloudflare/pages-action@1
        with:
          apiToken: ${{secrets.CLOUDFLARE_API_TOKEN}}
          accountId: ${{secrets.CLOUDFLARE_ACCOUNT_ID}}
          gitHubToken: ${{secrets.GITHUB_TOKEN}}
          projectName: nfid-frontend
          directory: dist/apps/nfid-frontend
